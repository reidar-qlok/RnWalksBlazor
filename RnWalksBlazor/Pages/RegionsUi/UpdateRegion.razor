@page "/updateregion/{Id}"
@using MudBlazor
@using RnWalksBlazor.Models;
@using RnWalksBlazor.Services;
@using System.Text.Json;
@using System.Text;
@using System.Net.Http.Headers;
@inject RegionService regionsService
@inject NavigationManager _navigationManager
@inject HttpClient Http
@inject ILocalStorageService _localStorageService
<div class="ma-5 d-flex justify-center">
    <MudPaper Width="500px" Class="pa-4">
        <MudText Typo="Typo.h5">Create New Region</MudText>
        <MudForm Model="updateRegion" @ref="form">
            <MudTextField T="Guid" Label="Id" @bind-Value="updateRegion.Id" For="@(() => updateRegion.Id)" />
            <MudTextField T="string" Label="Region" @bind-Value="updateRegion.Code" For="@(() => updateRegion.Code)" />
            <MudTextField T="string" Label="Name" @bind-Value="updateRegion.Name" For="@(() => updateRegion.Name)" />
            @if (!string.IsNullOrEmpty(updateRegion.RegionImageUrl))
            {
                <MudTd DataLabel="RegionImageUrl"><MudImage Src="@updateRegion.RegionImageUrl" Width="200" Alt="Image description" /></MudTd>
            }
            else
            {
                <MudTd DataLabel="RegionImageUrl"></MudTd>
            }
            <MudTextField T="string" Label="RegionImageUrl" @bind-Value="updateRegion.RegionImageUrl" For="@(() => updateRegion.RegionImageUrl)" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateTheRegion">Update Region</MudButton>
        </MudForm>
    </MudPaper>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private MudForm form;
    private Region updateRegion = new Region();
    protected override async Task OnInitializedAsync()
    {
        var token = await _localStorageService.GetItemAsync<string>("JwtToken");
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await Http.GetAsync($"api/regions/{Id}");
        if (response.IsSuccessStatusCode)
        {
            updateRegion = await response.Content.ReadFromJsonAsync<Region>();
        }
    }
    private async Task UpdateTheRegion()
    {
        try
        {
            var token = await _localStorageService.GetItemAsync<string>("JwtToken");
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PutAsJsonAsync($"api/regions/{updateRegion.Id}", updateRegion);
            if (response.IsSuccessStatusCode)
            {
                // var jsonContent = JsonSerializer.Serialize(newRegion);
                // var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                // // Send a POST request to the specified Uri with the given content
                // var answer = await Http.PostAsync("api/regions", content);
                _navigationManager.NavigateTo("/countryregions");
            }
            else
            {
                // Handle the error, possibly displaying a message to the user

            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that occur during the HTTP request

        }
    }
}