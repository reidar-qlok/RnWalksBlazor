@page "/login"
@using RnWalksBlazor.ViewModels.Accounts;
@using System.Text.Json;
@using System.Text;
@using System.Net;
@inject HttpClient _http;
@inject ILocalStorageService _localStorageService
@inject NavigationManager _navigationManager
<div class="ma-5 d-flex justify-center">
    <MudChip Color="Color.Primary">
        <h3>Users login form</h3>
    </MudChip>
</div>
<div class="ma-5 d-flex justify-center">
<MudCard width="500px">
    <MudForm Model="loginModel" @ref="form">
    <MudCardContent>
        <MudTextField @bind-Value="loginModel.Username"
        For="@(() => loginModel.Username)"
        Immediate="true"
        Label="User Name"/>

        <MudTextField @bind-Value="loginModel.Password"
        For="@(() => loginModel.Password)"
        Immediate="true"
        Label="Password" InputType="InputType.Password" />
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginAsync">Login</MudButton>
    </MudCardActions>
    </MudForm>
</MudCard>
</div>
@code {
    LoginVM loginModel = new LoginVM();
    MudForm form;
    string APIErrorMessage;
    private async Task LoginAsync()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var jsonPayload = JsonSerializer.Serialize(loginModel);
            var requestContent = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            var response = await _http.PostAsync("api/auth/login", requestContent);

            if (response.StatusCode == HttpStatusCode.BadRequest)
            {
                // Hantera felet
            }
            if (response.StatusCode==HttpStatusCode.OK)
            {
                var tokenResponse = await response.Content.ReadFromJsonAsync<JwtTokenResponseVM>();
                await _localStorageService.SetItemAsync<string>("JwtToken", tokenResponse.AccessToken);

                _navigationManager.NavigateTo("/loginconfirmation");
            }
        }
    }
}
